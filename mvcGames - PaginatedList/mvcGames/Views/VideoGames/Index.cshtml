@model PaginatedList<VideoGame>
@inject SignInManager<IdentityUserProfile> SignInManager
@using Microsoft.AspNetCore.Identity

@{
    ViewData["Title"] = "Index";
    VideoGame? columns = null;
}

<h1>Index</h1>

@if (SignInManager.IsSignedIn(User))
{
    <p>
        <a asp-action="Create">Create New</a>
    </p>
}

<form asp-action="Index" method="post">
    <div>
        <div>Search By</div>
        <input type="text" name="searchFilter" value="@Model.SearchFilter" />
        <input type="submit" value="Search" />
        <input type="submit" value="Reset" name="resetSearch" />
    </div>
</form>


<table class="table">
    <thead>
        <tr>
            <th>
                <a asp-action="Index"
                asp-route-searchFilter="@Model.SearchFilter"
                asp-route-sortByColumn="@nameof(columns.Title)">
                @Html.DisplayNameFor(model => columns.Title)
                </a>
            </th>
            <th>
                @Html.DisplayNameFor(model => columns.Description)
            </th>
            <th>
                @Html.DisplayNameFor(model => columns.ReleaseYear)
            </th>
            <th>
                @Html.DisplayNameFor(model => columns.PersonalRating)
            </th>
            <th>
                @Html.DisplayNameFor(model => columns.Platform)
            </th>
            <th>
                @Html.DisplayNameFor(model => columns.Image)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @if (Model != null)
        {
            @foreach (var item in Model)
            {
                <tr>
                    <td>
                        @Html.DisplayFor(modelItem => item.Title)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Description)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.ReleaseYear)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.PersonalRating)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Platform.Name)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.ImageId)
                    </td>
                    <td>
                        <a asp-action="Edit" asp-route-id="@item.Id">Edit</a>
                        <a asp-action="Details" asp-route-id="@item.Id">Details</a>
                        <a asp-action="Delete" asp-route-id="@item.Id">Delete</a>
                    </td>
                </tr>
            }
        }
    </tbody>
</table>


@{
    var nextDisabled = Model.HasNextPage ? "" : "disabled";
    var previousDisabled = Model.HasPreviousPage ? "" : "disabled";
}

<a asp-action="Index"
   asp-route-pageIndex="@Model.PreviousPageIndex"
   asp-route-searchFilter="@Model.SearchFilter"
   class="btn btn-info @previousDisabled">Previous</a>

<a asp-action="Index"
   asp-route-pageIndex="@Model.NextPageIndex"
   asp-route-searchFilter="@Model.SearchFilter"
   class="btn btn-info @nextDisabled">Next</a>